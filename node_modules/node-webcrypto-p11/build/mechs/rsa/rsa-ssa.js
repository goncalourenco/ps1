"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core = require("webcrypto-core");
const crypto_1 = require("./crypto");
const key_1 = require("./key");
class RsaSsaProvider extends core.RsaSsaProvider {
    constructor(crypto) {
        super();
        this.crypto = crypto;
    }
    onGenerateKey(algorithm, extractable, keyUsages) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const key = yield crypto_1.RsaCrypto.generateKey(this.crypto.session, Object.assign({}, algorithm, { name: this.name }), extractable, keyUsages);
            return key;
        });
    }
    onSign(algorithm, key, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let buf = Buffer.from(data);
                const mechanism = this.wc2pk11(algorithm, key.algorithm);
                mechanism.name = crypto_1.RsaCrypto.getAlgorithm(this.crypto.session, this.name, mechanism.name);
                if (mechanism.name === "RSA_PKCS") {
                    buf = crypto_1.RsaCrypto.prepareData(key.algorithm.hash.name, buf);
                }
                this.crypto.session.createSign(mechanism, key.key).once(buf, (err, data2) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(new Uint8Array(data2).buffer);
                    }
                });
            });
        });
    }
    onVerify(algorithm, key, signature, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let buf = Buffer.from(data);
                const mechanism = this.wc2pk11(algorithm, key.algorithm);
                mechanism.name = crypto_1.RsaCrypto.getAlgorithm(this.crypto.session, this.name, mechanism.name);
                if (mechanism.name === "RSA_PKCS") {
                    buf = crypto_1.RsaCrypto.prepareData(key.algorithm.hash.name, buf);
                }
                this.crypto.session.createVerify(mechanism, key.key).once(buf, Buffer.from(signature), (err, data2) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(data2);
                    }
                });
            });
        });
    }
    onExportKey(format, key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return crypto_1.RsaCrypto.exportKey(this.crypto.session, format, key);
        });
    }
    onImportKey(format, keyData, algorithm, extractable, keyUsages) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const key = yield crypto_1.RsaCrypto.importKey(this.crypto.session, format, keyData, Object.assign({}, algorithm, { name: this.name }), extractable, keyUsages);
            return key;
        });
    }
    checkCryptoKey(key, keyUsage) {
        super.checkCryptoKey(key, keyUsage);
        if (!(key instanceof key_1.RsaCryptoKey)) {
            throw new TypeError("key: Is not PKCS11 CryptoKey");
        }
    }
    wc2pk11(alg, keyAlg) {
        let res;
        switch (keyAlg.hash.name.toUpperCase()) {
            case "SHA-1":
                res = "SHA1_RSA_PKCS";
                break;
            case "SHA-224":
                res = "SHA224_RSA_PKCS";
                break;
            case "SHA-256":
                res = "SHA256_RSA_PKCS";
                break;
            case "SHA-384":
                res = "SHA384_RSA_PKCS";
                break;
            case "SHA-512":
                res = "SHA512_RSA_PKCS";
                break;
            default:
                throw new core.OperationError(`Cannot create PKCS11 mechanism from algorithm '${keyAlg.hash.name}'`);
        }
        return { name: res, params: null };
    }
}
exports.RsaSsaProvider = RsaSsaProvider;
