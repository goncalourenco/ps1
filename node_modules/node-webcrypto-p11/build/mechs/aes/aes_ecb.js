"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core = require("webcrypto-core");
const key_1 = require("../../key");
const crypto_1 = require("./crypto");
class AesEcbProvider extends core.ProviderCrypto {
    constructor(crypto) {
        super();
        this.crypto = crypto;
        this.name = "AES-ECB";
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
    onGenerateKey(algorithm, extractable, keyUsages) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const key = yield crypto_1.AesCrypto.generateKey(this.crypto.session, {
                name: this.name,
                length: algorithm.length,
            }, extractable, keyUsages);
            return key;
        });
    }
    onEncrypt(algorithm, key, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return crypto_1.AesCrypto.encrypt(this.crypto.session, true, algorithm, key, new Uint8Array(data));
        });
    }
    onDecrypt(algorithm, key, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return crypto_1.AesCrypto.decrypt(this.crypto.session, true, algorithm, key, new Uint8Array(data));
        });
    }
    onExportKey(format, key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return crypto_1.AesCrypto.exportKey(this.crypto.session, format, key);
        });
    }
    onImportKey(format, keyData, algorithm, extractable, keyUsages) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return crypto_1.AesCrypto.importKey(this.crypto.session, format, keyData, { name: algorithm.name }, extractable, keyUsages);
        });
    }
    checkCryptoKey(key, keyUsage) {
        super.checkCryptoKey(key, keyUsage);
        if (!(key instanceof key_1.CryptoKey)) {
            throw new TypeError("key: Is not a PKCS11 CryptoKey");
        }
    }
}
exports.AesEcbProvider = AesEcbProvider;
