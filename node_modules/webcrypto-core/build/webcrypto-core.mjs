/**
 * Copyright (c) 2019, Peculiar Ventures, All rights reserved.
 */

import { __awaiter } from 'tslib';
import { Convert } from 'pvtsutils';

class CryptoError extends Error {
}

class AlgorithmError extends CryptoError {
}

class UnsupportedOperationError extends CryptoError {
    constructor(methodName) {
        super(`Unsupported operation: ${methodName ? `${methodName}` : ""}`);
    }
}

class OperationError extends CryptoError {
}

class RequiredPropertyError extends CryptoError {
    constructor(propName) {
        super(`${propName}: Missing required property`);
    }
}

/**
 * PEM converter
 */
class PemConverter {
    /**
     * Converts PEM to Array buffer
     * @param pem PEM string
     */
    static toArrayBuffer(pem) {
        const base64 = pem
            .replace(/-{5}(BEGIN|END) .*-{5}/g, "")
            .replace("\r", "")
            .replace("\n", "");
        return Convert.FromBase64(base64);
    }
    /**
     * Converts PEM to Uint8Array
     * @param pem PEM string
     */
    static toUint8Array(pem) {
        const bytes = this.toArrayBuffer(pem);
        return new Uint8Array(bytes);
    }
    /**
     * Converts buffer source to PEM
     * @param buffer Buffer source
     * @param tag PEM tag name
     */
    static fromBufferSource(buffer, tag) {
        const base64 = Convert.ToBase64(buffer);
        let sliced;
        let offset = 0;
        const rows = [];
        while (true) {
            sliced = base64.slice(offset, offset = offset + 64);
            if (sliced.length) {
                rows.push(sliced);
                if (sliced.length < 64) {
                    break;
                }
            }
            else {
                break;
            }
        }
        const upperCaseTag = tag.toUpperCase();
        return `-----BEGIN ${upperCaseTag}-----\n${rows.join("\n")}\n-----END ${upperCaseTag}-----`;
    }
    /**
     * Returns `true` if incoming data is PEM string, otherwise `false`
     * @param data Data
     */
    static isPEM(data) {
        // tslint:disable-next-line:max-line-length
        return /-----BEGIN .+-----[A-Za-z0-9+\/\+\=\s\n]+-----END .+-----/i.test(data);
    }
    /**
     * Returns tag name from PEM string
     * @param pem PEM string
     */
    static getTagName(pem) {
        if (!this.isPEM(pem)) {
            throw new Error("Bad parameter. Incoming data is not right PEM");
        }
        const res = /-----BEGIN (.+)-----/.exec(pem);
        if (!res) {
            throw new Error("Cannot get tag from PEM");
        }
        return res[1];
    }
    /**
     * Returns `true` if tag name from PEM matches to tagName parameter
     * @param pem PEM string
     * @param tagName Tag name for comparison
     */
    static hasTagName(pem, tagName) {
        const tag = this.getTagName(pem);
        return tagName.toLowerCase() === tag.toLowerCase();
    }
    static isCertificate(pem) {
        return this.hasTagName(pem, "certificate");
    }
    static isCertificateRequest(pem) {
        return this.hasTagName(pem, "certificate request");
    }
    static isCRL(pem) {
        return this.hasTagName(pem, "x509 crl");
    }
    static isPublicKey(pem) {
        return this.hasTagName(pem, "public key");
    }
}

class BufferSourceConverter {
    static toArrayBuffer(data) {
        const buf = this.toUint8Array(data);
        if (buf.byteOffset || buf.length) {
            return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);
        }
        return buf.buffer;
    }
    static toUint8Array(data) {
        if (typeof Buffer !== "undefined" && Buffer.isBuffer(data)) {
            return new Uint8Array(data);
        }
        if (ArrayBuffer.isView(data)) {
            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
        }
        if (data instanceof ArrayBuffer) {
            return new Uint8Array(data);
        }
        throw new TypeError("The provided value is not of type '(ArrayBuffer or ArrayBufferView)'");
    }
    static isBufferSource(data) {
        return ArrayBuffer.isView(data) || data instanceof ArrayBuffer;
    }
}

function isJWK(data) {
    return typeof data === "object" && "kty" in data;
}

class ProviderCrypto {
    //#region Digest
    digest(algorithm, data) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkDigest.apply(this, arguments);
            return this.onDigest.apply(this, arguments);
        });
    }
    checkDigest(algorithm, data) {
        this.checkAlgorithmName(algorithm);
    }
    onDigest(algorithm, data) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new UnsupportedOperationError("digest");
        });
    }
    //#endregion
    //#region Generate key
    generateKey(algorithm, extractable, keyUsages) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkGenerateKey.apply(this, arguments);
            return this.onGenerateKey.apply(this, arguments);
        });
    }
    checkGenerateKey(algorithm, extractable, keyUsages) {
        this.checkAlgorithmName(algorithm);
        this.checkGenerateKeyParams(algorithm);
        if (!(keyUsages && keyUsages.length)) {
            throw new TypeError(`Usages cannot be empty when creating a key.`);
        }
        let allowedUsages;
        if (Array.isArray(this.usages)) {
            allowedUsages = this.usages;
        }
        else {
            allowedUsages = this.usages.privateKey.concat(this.usages.publicKey);
        }
        this.checkKeyUsages(keyUsages, allowedUsages);
    }
    checkGenerateKeyParams(algorithm) {
        // nothing
    }
    onGenerateKey(algorithm, extractable, keyUsages) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new UnsupportedOperationError("generateKey");
        });
    }
    //#endregion
    //#region Sign
    sign(algorithm, key, data) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkSign.apply(this, arguments);
            return this.onSign.apply(this, arguments);
        });
    }
    checkSign(algorithm, key, data) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(key, "sign");
    }
    onSign(algorithm, key, data) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new UnsupportedOperationError("sign");
        });
    }
    //#endregion
    //#region Verify
    verify(algorithm, key, signature, data) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkVerify.apply(this, arguments);
            return this.onVerify.apply(this, arguments);
        });
    }
    checkVerify(algorithm, key, signature, data) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(key, "verify");
    }
    onVerify(algorithm, key, signature, data) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new UnsupportedOperationError("verify");
        });
    }
    //#endregion
    //#region Encrypt
    encrypt(algorithm, key, data, options) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkEncrypt.apply(this, arguments);
            return this.onEncrypt.apply(this, arguments);
        });
    }
    checkEncrypt(algorithm, key, data, options = {}) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(key, options.keyUsage ? "encrypt" : void 0);
    }
    onEncrypt(algorithm, key, data) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new UnsupportedOperationError("encrypt");
        });
    }
    //#endregion
    //#region
    decrypt(algorithm, key, data, options) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkDecrypt.apply(this, arguments);
            return this.onDecrypt.apply(this, arguments);
        });
    }
    checkDecrypt(algorithm, key, data, options = {}) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(key, options.keyUsage ? "decrypt" : void 0);
    }
    onDecrypt(algorithm, key, data) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new UnsupportedOperationError("decrypt");
        });
    }
    //#endregion
    //#region Derive bits
    deriveBits(algorithm, baseKey, length, options) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkDeriveBits.apply(this, arguments);
            return this.onDeriveBits.apply(this, arguments);
        });
    }
    checkDeriveBits(algorithm, baseKey, length, options = {}) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(baseKey, options.keyUsage ? "deriveBits" : void 0);
        if (length % 8 !== 0) {
            throw new OperationError("length: Is not multiple of 8");
        }
    }
    onDeriveBits(algorithm, baseKey, length) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new UnsupportedOperationError("deriveBits");
        });
    }
    //#endregion
    //#region Export key
    exportKey(format, key) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkExportKey.apply(this, arguments);
            return this.onExportKey.apply(this, arguments);
        });
    }
    checkExportKey(format, key) {
        this.checkKeyFormat(format);
        this.checkCryptoKey(key);
        if (!key.extractable) {
            throw new CryptoError("key: Is not extractable");
        }
    }
    onExportKey(format, key) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new UnsupportedOperationError("exportKey");
        });
    }
    //#endregion
    //#region Import key
    importKey(format, keyData, algorithm, extractable, keyUsages) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkImportKey.apply(this, arguments);
            return this.onImportKey.apply(this, arguments);
        });
    }
    checkImportKey(format, keyData, algorithm, extractable, keyUsages) {
        this.checkKeyFormat(format);
        this.checkKeyData(format, keyData);
        this.checkAlgorithmName(algorithm);
        this.checkImportParams(algorithm);
        // check key usages
        if (Array.isArray(this.usages)) {
            // symmetric provider
            this.checkKeyUsages(keyUsages, this.usages);
        }
    }
    onImportKey(format, keyData, algorithm, extractable, keyUsages) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new UnsupportedOperationError("importKey");
        });
    }
    //#endregion
    checkAlgorithmName(algorithm) {
        if (algorithm.name.toLowerCase() !== this.name.toLowerCase()) {
            throw new AlgorithmError("Unrecognized name");
        }
    }
    checkAlgorithmParams(algorithm) {
        // nothing
    }
    checkDerivedKeyParams(algorithm) {
        // nothing
    }
    checkKeyUsages(usages, allowed) {
        for (const usage of usages) {
            if (allowed.indexOf(usage) === -1) {
                throw new TypeError("Cannot create a key using the specified key usages");
            }
        }
    }
    checkCryptoKey(key, keyUsage) {
        this.checkAlgorithmName(key.algorithm);
        if (keyUsage && key.usages.indexOf(keyUsage) === -1) {
            throw new CryptoError(`key does not match that of operation`);
        }
    }
    checkRequiredProperty(data, propName) {
        if (!(propName in data)) {
            throw new RequiredPropertyError(propName);
        }
    }
    checkHashAlgorithm(algorithm, hashAlgorithms) {
        for (const item of hashAlgorithms) {
            if (item.toLowerCase() === algorithm.name.toLowerCase()) {
                return;
            }
        }
        throw new OperationError(`hash: Must be one of ${hashAlgorithms.join(", ")}`);
    }
    checkImportParams(algorithm) {
        // nothing
    }
    checkKeyFormat(format) {
        switch (format) {
            case "raw":
            case "pkcs8":
            case "spki":
            case "jwk":
                break;
            default:
                throw new TypeError("format: Is invalid value. Must be 'jwk', 'raw', 'spki', or 'pkcs8'");
        }
    }
    checkKeyData(format, keyData) {
        if (!keyData) {
            throw new TypeError("keyData: Cannot be empty on empty on key importing");
        }
        if (format === "jwk") {
            if (!isJWK(keyData)) {
                throw new TypeError("keyData: Is not JsonWebToken");
            }
        }
        else if (!BufferSourceConverter.isBufferSource(keyData)) {
            throw new TypeError("keyData: Is not ArrayBufferView or ArrayBuffer");
        }
    }
    prepareData(data) {
        return BufferSourceConverter.toArrayBuffer(data);
    }
}

class AesProvider extends ProviderCrypto {
    checkGenerateKeyParams(algorithm) {
        // length
        this.checkRequiredProperty(algorithm, "length");
        if (typeof algorithm.length !== "number") {
            throw new TypeError("length: Is not of type Number");
        }
        switch (algorithm.length) {
            case 128:
            case 192:
            case 256:
                break;
            default:
                throw new TypeError("length: Must be 128, 192, or 256");
        }
    }
    checkDerivedKeyParams(algorithm) {
        this.checkGenerateKeyParams(algorithm);
    }
}

class AesCbcProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-CBC";
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "iv");
        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {
            throw new TypeError("iv: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
        if (algorithm.iv.byteLength !== 16) {
            throw new TypeError("iv: Must have length 16 bytes");
        }
    }
}

class AesCmacProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-CMAC";
        this.usages = ["sign", "verify"];
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "length");
        if (typeof algorithm.length !== "number") {
            throw new TypeError("length: Is not a Number");
        }
        if (algorithm.length < 1) {
            throw new OperationError("length: Must be more than 0");
        }
    }
}

class AesCtrProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-CTR";
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
    checkAlgorithmParams(algorithm) {
        // counter
        this.checkRequiredProperty(algorithm, "counter");
        if (!(algorithm.counter instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.counter))) {
            throw new TypeError("counter: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
        if (algorithm.counter.byteLength !== 16) {
            throw new TypeError("iv: Must have length 16 bytes");
        }
        // length
        this.checkRequiredProperty(algorithm, "length");
        if (typeof algorithm.length !== "number") {
            throw new TypeError("length: Is not a Number");
        }
        if (algorithm.length < 1) {
            throw new OperationError("length: Must be more than 0");
        }
    }
}

class AesEcbProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-ECB";
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
}

class AesGcmProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-GCM";
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
    checkAlgorithmParams(algorithm) {
        // iv
        this.checkRequiredProperty(algorithm, "iv");
        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {
            throw new TypeError("iv: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
        if (algorithm.iv.byteLength < 1) {
            throw new OperationError("iv: Must have length more than 0 and less than 2^64 - 1");
        }
        // tagLength
        if (!("tagLength" in algorithm)) {
            algorithm.tagLength = 128;
        }
        switch (algorithm.tagLength) {
            case 32:
            case 64:
            case 96:
            case 104:
            case 112:
            case 120:
            case 128:
                break;
            default:
                throw new OperationError("tagLength: Must be one of 32, 64, 96, 104, 112, 120 or 128");
        }
    }
}

class AesKwProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-KW";
        this.usages = ["wrapKey", "unwrapKey"];
    }
}

class DesProvider extends ProviderCrypto {
    constructor() {
        super(...arguments);
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
    checkAlgorithmParams(algorithm) {
        if (this.ivSize) {
            this.checkRequiredProperty(algorithm, "iv");
            if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {
                throw new TypeError("iv: Is not of type '(ArrayBuffer or ArrayBufferView)'");
            }
            if (algorithm.iv.byteLength !== this.ivSize) {
                throw new TypeError(`iv: Must have length ${this.ivSize} bytes`);
            }
        }
    }
    checkGenerateKeyParams(algorithm) {
        // length
        this.checkRequiredProperty(algorithm, "length");
        if (typeof algorithm.length !== "number") {
            throw new TypeError("length: Is not of type Number");
        }
        if (algorithm.length !== this.keySizeBits) {
            throw new OperationError(`algorith.length: Must be ${this.keySizeBits}`);
        }
    }
    checkDerivedKeyParams(algorithm) {
        this.checkGenerateKeyParams(algorithm);
    }
}

class RsaProvider extends ProviderCrypto {
    constructor() {
        super(...arguments);
        this.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
    }
    checkGenerateKeyParams(algorithm) {
        // hash
        this.checkRequiredProperty(algorithm, "hash");
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
        // public exponent
        this.checkRequiredProperty(algorithm, "publicExponent");
        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {
            throw new TypeError("publicExponent: Missing or not a Uint8Array");
        }
        const publicExponent = Convert.ToBase64(algorithm.publicExponent);
        if (!(publicExponent === "Aw==" || publicExponent === "AQAB")) {
            throw new TypeError("publicExponent: Must be [3] or [1,0,1]");
        }
        // modulus length
        this.checkRequiredProperty(algorithm, "modulusLength");
        switch (algorithm.modulusLength) {
            case 1024:
            case 2048:
            case 4096:
                break;
            default:
                throw new TypeError("modulusLength: Must be 1024, 2048, or 4096");
        }
    }
    checkImportParams(algorithm) {
        this.checkRequiredProperty(algorithm, "hash");
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
    }
}

class RsaSsaProvider extends RsaProvider {
    constructor() {
        super(...arguments);
        this.name = "RSASSA-PKCS1-v1_5";
        this.usages = {
            privateKey: ["sign"],
            publicKey: ["verify"],
        };
    }
}

class RsaPssProvider extends RsaProvider {
    constructor() {
        super(...arguments);
        this.name = "RSA-PSS";
        this.usages = {
            privateKey: ["sign"],
            publicKey: ["verify"],
        };
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "saltLength");
        if (typeof algorithm.saltLength !== "number") {
            throw new TypeError("saltLength: Is not a Number");
        }
        if (algorithm.saltLength < 1) {
            throw new RangeError("saltLength: Must be more than 0");
        }
    }
}

class RsaOaepProvider extends RsaProvider {
    constructor() {
        super(...arguments);
        this.name = "RSA-OAEP";
        this.usages = {
            privateKey: ["decrypt", "unwrapKey"],
            publicKey: ["encrypt", "wrapKey"],
        };
    }
    checkAlgorithmParams(algorithm) {
        // label
        if (algorithm.label
            && !(algorithm.label instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.label))) {
            throw new TypeError("label: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
    }
}

class EllipticProvider extends ProviderCrypto {
    checkGenerateKeyParams(algorithm) {
        // named curve
        this.checkRequiredProperty(algorithm, "namedCurve");
        this.checkNamedCurve(algorithm.namedCurve);
    }
    checkNamedCurve(namedCurve) {
        for (const item of this.namedCurves) {
            if (item.toLowerCase() === namedCurve.toLowerCase()) {
                return;
            }
        }
        throw new OperationError(`namedCurve: Must be one of ${this.namedCurves.join(", ")}`);
    }
}

class EcdsaProvider extends EllipticProvider {
    constructor() {
        super(...arguments);
        this.name = "ECDSA";
        this.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
        this.usages = {
            privateKey: ["sign"],
            publicKey: ["verify"],
        };
        this.namedCurves = ["P-256", "P-384", "P-521", "K-256"];
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "hash");
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
    }
}

const KEY_TYPES = ["secret", "private", "public"];
class CryptoKey {
    static create(algorithm, type, extractable, usages) {
        const key = new this();
        key.algorithm = algorithm;
        key.type = type;
        key.extractable = extractable;
        key.usages = usages;
        return key;
    }
    static isKeyType(data) {
        return KEY_TYPES.indexOf(data) !== -1;
    }
}

class EcdhProvider extends EllipticProvider {
    constructor() {
        super(...arguments);
        this.name = "ECDH";
        this.usages = {
            privateKey: ["deriveBits", "deriveKey"],
            publicKey: [],
        };
        this.namedCurves = ["P-256", "P-384", "P-521", "K-256"];
    }
    checkAlgorithmParams(algorithm) {
        // public
        this.checkRequiredProperty(algorithm, "public");
        if (!(algorithm.public instanceof CryptoKey)) {
            throw new TypeError("public: Is not a CryptoKey");
        }
        if (algorithm.public.type !== "public") {
            throw new OperationError("public: Is not a public key");
        }
        if (algorithm.public.algorithm.name !== this.name) {
            throw new OperationError(`public: Is not ${this.name} key`);
        }
    }
}

class HmacProvider extends ProviderCrypto {
    constructor() {
        super(...arguments);
        this.name = "HMAC";
        this.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
        this.usages = ["sign", "verify"];
    }
    /**
     * Returns default size in bits by hash algorithm name
     * @param algName Name of the hash algorithm
     */
    getDefaultLength(algName) {
        switch (algName.toUpperCase()) {
            case "SHA-1":
                return 160;
            case "SHA-256":
                return 256;
            case "SHA-384":
                return 384;
            case "SHA-512":
                return 512;
            default:
                throw new Error(`Unknown algorithm name '${algName}'`);
        }
    }
    checkGenerateKeyParams(algorithm) {
        // hash
        this.checkRequiredProperty(algorithm, "hash");
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
        // length
        if ("length" in algorithm) {
            if (typeof algorithm.length !== "number") {
                throw new TypeError("length: Is not a Number");
            }
            if (algorithm.length < 1) {
                throw new RangeError("length: Number is out of range");
            }
        }
    }
    checkImportParams(algorithm) {
        // hash
        this.checkRequiredProperty(algorithm, "hash");
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
    }
}

class Pbkdf2Provider extends ProviderCrypto {
    constructor() {
        super(...arguments);
        this.name = "PBKDF2";
        this.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
        this.usages = ["deriveBits", "deriveKey"];
    }
    checkAlgorithmParams(algorithm) {
        // hash
        this.checkRequiredProperty(algorithm, "hash");
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
        // salt
        this.checkRequiredProperty(algorithm, "salt");
        if (!(algorithm.salt instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.salt))) {
            throw new TypeError("salt: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
        // iterations
        this.checkRequiredProperty(algorithm, "iterations");
        if (typeof algorithm.iterations !== "number") {
            throw new TypeError("iterations: Is not a Number");
        }
        if (algorithm.iterations < 1) {
            throw new TypeError("iterations: Is less than 1");
        }
    }
    checkImportKey(format, keyData, algorithm, extractable, keyUsages) {
        super.checkImportKey(format, keyData, algorithm, extractable, keyUsages);
        if (extractable) {
            // If extractable is not false, then throw a SyntaxError
            throw new SyntaxError("extractable: Must be False");
        }
    }
}

class HkdfProvider extends ProviderCrypto {
    constructor() {
        super(...arguments);
        this.name = "HKDF";
        this.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
        this.usages = ["deriveKey", "deriveBits"];
    }
    checkAlgorithmParams(algorithm) {
        // hash
        this.checkRequiredProperty(algorithm, "hash");
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
        // salt
        this.checkRequiredProperty(algorithm, "salt");
        if (!BufferSourceConverter.isBufferSource(algorithm.salt)) {
            throw new TypeError("salt: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
        // info
        this.checkRequiredProperty(algorithm, "info");
        if (!BufferSourceConverter.isBufferSource(algorithm.info)) {
            throw new TypeError("salt: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
    }
    checkImportKey(format, keyData, algorithm, extractable, keyUsages) {
        super.checkImportKey(format, keyData, algorithm, extractable, keyUsages);
        if (extractable) {
            // If extractable is not false, then throw a SyntaxError
            throw new SyntaxError("extractable: Must be False");
        }
    }
}

class Crypto {
}

class ProviderStorage {
    constructor() {
        this.items = {};
    }
    get(algorithmName) {
        return this.items[algorithmName.toLowerCase()] || null;
    }
    set(provider) {
        this.items[provider.name.toLowerCase()] = provider;
    }
    removeAt(algorithmName) {
        const provider = this.get(algorithmName.toLowerCase());
        if (provider) {
            delete this.items[algorithmName];
        }
        return provider;
    }
    has(name) {
        return !!this.get(name);
    }
    get length() {
        return Object.keys(this.items).length;
    }
    get algorithms() {
        const algorithms = [];
        for (const key in this.items) {
            const provider = this.items[key];
            algorithms.push(provider.name);
        }
        return algorithms.sort();
    }
}

class SubtleCrypto {
    constructor() {
        this.providers = new ProviderStorage();
    }
    static isHashedAlgorithm(data) {
        return data instanceof Object
            && "name" in data
            && "hash" in data;
    }
    digest(algorithm, data) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkRequiredArguments(arguments, 2, "digest");
            const preparedAlgorithm = this.prepareAlgorithm(algorithm);
            const preparedData = BufferSourceConverter.toArrayBuffer(data);
            const provider = this.getProvider(preparedAlgorithm.name);
            const result = yield provider.digest(preparedAlgorithm, preparedData);
            return result;
        });
    }
    generateKey(algorithm, extractable, keyUsages) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkRequiredArguments(arguments, 3, "generateKey");
            const preparedAlgorithm = this.prepareAlgorithm(algorithm);
            const provider = this.getProvider(preparedAlgorithm.name);
            const result = yield provider.generateKey(Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), extractable, keyUsages);
            return result;
        });
    }
    sign(algorithm, key, data) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkRequiredArguments(arguments, 3, "sign");
            this.checkCryptoKey(key);
            const preparedAlgorithm = this.prepareAlgorithm(algorithm);
            const preparedData = BufferSourceConverter.toArrayBuffer(data);
            const provider = this.getProvider(preparedAlgorithm.name);
            const result = yield provider.sign(Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), key, preparedData);
            return result;
        });
    }
    verify(algorithm, key, signature, data) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkRequiredArguments(arguments, 4, "verify");
            this.checkCryptoKey(key);
            const preparedAlgorithm = this.prepareAlgorithm(algorithm);
            const preparedData = BufferSourceConverter.toArrayBuffer(data);
            const preparedSignature = BufferSourceConverter.toArrayBuffer(signature);
            const provider = this.getProvider(preparedAlgorithm.name);
            const result = yield provider.verify(Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), key, preparedSignature, preparedData);
            return result;
        });
    }
    encrypt(algorithm, key, data) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkRequiredArguments(arguments, 3, "encrypt");
            this.checkCryptoKey(key);
            const preparedAlgorithm = this.prepareAlgorithm(algorithm);
            const preparedData = BufferSourceConverter.toArrayBuffer(data);
            const provider = this.getProvider(preparedAlgorithm.name);
            const result = yield provider.encrypt(Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), key, preparedData, { keyUsage: true });
            return result;
        });
    }
    decrypt(algorithm, key, data) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkRequiredArguments(arguments, 3, "decrypt");
            this.checkCryptoKey(key);
            const preparedAlgorithm = this.prepareAlgorithm(algorithm);
            const preparedData = BufferSourceConverter.toArrayBuffer(data);
            const provider = this.getProvider(preparedAlgorithm.name);
            const result = yield provider.decrypt(Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), key, preparedData, { keyUsage: true });
            return result;
        });
    }
    deriveBits(algorithm, baseKey, length) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkRequiredArguments(arguments, 3, "deriveBits");
            this.checkCryptoKey(baseKey);
            const preparedAlgorithm = this.prepareAlgorithm(algorithm);
            const provider = this.getProvider(preparedAlgorithm.name);
            const result = yield provider.deriveBits(Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), baseKey, length, { keyUsage: true });
            return result;
        });
    }
    deriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkRequiredArguments(arguments, 5, "deriveKey");
            // check derivedKeyType
            const preparedDerivedKeyType = this.prepareAlgorithm(derivedKeyType);
            const importProvider = this.getProvider(preparedDerivedKeyType.name);
            importProvider.checkDerivedKeyParams(preparedDerivedKeyType);
            // derive bits
            const preparedAlgorithm = this.prepareAlgorithm(algorithm);
            const provider = this.getProvider(preparedAlgorithm.name);
            provider.checkCryptoKey(baseKey, "deriveKey");
            const derivedBits = yield provider.deriveBits(Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), baseKey, derivedKeyType.length, { keyUsage: false });
            // import derived key
            return this.importKey("raw", derivedBits, derivedKeyType, extractable, keyUsages);
        });
    }
    exportKey(format, key) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkRequiredArguments(arguments, 2, "exportKey");
            this.checkCryptoKey(key);
            const provider = this.getProvider(key.algorithm.name);
            const result = yield provider.exportKey(format, key);
            return result;
        });
    }
    importKey(format, keyData, algorithm, extractable, keyUsages) {
        return __awaiter(this, arguments, void 0, function* () {
            this.checkRequiredArguments(arguments, 5, "importKey");
            const preparedAlgorithm = this.prepareAlgorithm(algorithm);
            const provider = this.getProvider(preparedAlgorithm.name);
            if (["pkcs8", "spki", "raw"].indexOf(format) !== -1) {
                const preparedData = BufferSourceConverter.toArrayBuffer(keyData);
                return provider.importKey(format, preparedData, Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), extractable, keyUsages);
            }
            else {
                if (!keyData.kty) {
                    throw new TypeError("keyData: Is not JSON");
                }
            }
            return provider.importKey(format, keyData, Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), extractable, keyUsages);
        });
    }
    wrapKey(format, key, wrappingKey, wrapAlgorithm) {
        return __awaiter(this, void 0, void 0, function* () {
            let keyData = yield this.exportKey(format, key);
            if (format === "jwk") {
                const json = JSON.stringify(keyData);
                keyData = Convert.FromUtf8String(json);
            }
            // encrypt key data
            const preparedAlgorithm = this.prepareAlgorithm(wrapAlgorithm);
            const preparedData = BufferSourceConverter.toArrayBuffer(keyData);
            const provider = this.getProvider(preparedAlgorithm.name);
            return provider.encrypt(Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), wrappingKey, preparedData, { keyUsage: false });
        });
    }
    unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) {
        return __awaiter(this, void 0, void 0, function* () {
            // decrypt wrapped key
            const preparedAlgorithm = this.prepareAlgorithm(unwrapAlgorithm);
            const preparedData = BufferSourceConverter.toArrayBuffer(wrappedKey);
            const provider = this.getProvider(preparedAlgorithm.name);
            let keyData = yield provider.decrypt(Object.assign(Object.assign({}, preparedAlgorithm), { name: provider.name }), unwrappingKey, preparedData, { keyUsage: false });
            if (format === "jwk") {
                try {
                    keyData = JSON.parse(Convert.ToUtf8String(keyData));
                }
                catch (e) {
                    const error = new TypeError("wrappedKey: Is not a JSON");
                    error.internal = e;
                    throw error;
                }
            }
            // import key
            return this.importKey(format, keyData, unwrappedKeyAlgorithm, extractable, keyUsages);
        });
    }
    checkRequiredArguments(args, size, methodName) {
        if (args.length !== size) {
            throw new TypeError(`Failed to execute '${methodName}' on 'SubtleCrypto': ${size} arguments required, but only ${args.length} present`);
        }
    }
    prepareAlgorithm(algorithm) {
        if (typeof algorithm === "string") {
            return {
                name: algorithm,
            };
        }
        if (SubtleCrypto.isHashedAlgorithm(algorithm)) {
            const preparedAlgorithm = Object.assign({}, algorithm);
            preparedAlgorithm.hash = this.prepareAlgorithm(algorithm.hash);
            return preparedAlgorithm;
        }
        return Object.assign({}, algorithm);
    }
    getProvider(name) {
        const provider = this.providers.get(name);
        if (!provider) {
            throw new AlgorithmError("Unrecognized name");
        }
        return provider;
    }
    checkCryptoKey(key) {
        if (!(key instanceof CryptoKey)) {
            throw new TypeError(`Key is not of type 'CryptoKey'`);
        }
    }
}

export { AesCbcProvider, AesCmacProvider, AesCtrProvider, AesEcbProvider, AesGcmProvider, AesKwProvider, AesProvider, AlgorithmError, BufferSourceConverter, Crypto, CryptoError, CryptoKey, DesProvider, EcdhProvider, EcdsaProvider, EllipticProvider, HkdfProvider, HmacProvider, OperationError, Pbkdf2Provider, PemConverter, ProviderCrypto, ProviderStorage, RequiredPropertyError, RsaOaepProvider, RsaProvider, RsaPssProvider, RsaSsaProvider, SubtleCrypto, UnsupportedOperationError, isJWK };
