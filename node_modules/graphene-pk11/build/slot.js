"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core = tslib_1.__importStar(require("./core"));
const mech = tslib_1.__importStar(require("./mech"));
const session = tslib_1.__importStar(require("./session"));
const token = tslib_1.__importStar(require("./token"));
var SlotFlag;
(function (SlotFlag) {
    SlotFlag[SlotFlag["TOKEN_PRESENT"] = 1] = "TOKEN_PRESENT";
    SlotFlag[SlotFlag["REMOVABLE_DEVICE"] = 2] = "REMOVABLE_DEVICE";
    SlotFlag[SlotFlag["HW_SLOT"] = 4] = "HW_SLOT";
})(SlotFlag = exports.SlotFlag || (exports.SlotFlag = {}));
class Slot extends core.HandleObject {
    constructor(handle, module, lib) {
        super(handle, lib);
        this.module = module;
        this.getInfo();
    }
    getToken() {
        return new token.Token(this.handle, this.lib);
    }
    getMechanisms() {
        const arr = this.lib.C_GetMechanismList(this.handle);
        return new mech.MechanismCollection(arr, this.handle, this.lib);
    }
    initToken(pin, label = "") {
        return this.lib.C_InitToken(this.handle, pin, label);
    }
    open(flags = session.SessionFlag.SERIAL_SESSION) {
        const hSession = this.lib.C_OpenSession(this.handle, flags);
        return new session.Session(hSession, this, this.lib);
    }
    closeAll() {
        this.lib.C_CloseAllSessions(this.handle);
    }
    getInfo() {
        const info = this.lib.C_GetSlotInfo(this.handle);
        this.slotDescription = core.removePadding(info.slotDescription);
        this.manufacturerID = core.removePadding(info.manufacturerID);
        this.flags = info.flags;
        this.hardwareVersion = info.hardwareVersion;
        this.firmwareVersion = info.firmwareVersion;
    }
}
exports.Slot = Slot;
class SlotCollection extends core.Collection {
    constructor(items, module, lib, classType = Slot) {
        super(items, lib, classType);
        this.module = module;
    }
    items(index) {
        return new Slot(this.items_[index], this.module, this.lib);
    }
}
exports.SlotCollection = SlotCollection;
